---
interface Props {
  title: string;
  description: string;
  img: string;
  link?: string;
}
const { title, description, img, link } = Astro.props;
---

<div class="flip-card service-card outline-none" tabindex="0" aria-label={title}>
  <div class="flip-card-inner w-full h-full shadow-xl">
    <div class="flip-card-front golden-front">
      <img
        src={img}
        alt={title}
        class="absolute inset-0 w-full h-full object-cover opacity-70"
        loading="lazy"
        decoding="async"
        fetchpriority="low"
      />
      <div class="relative z-10 h-full w-full flex items-center justify-center p-6">
        <h3 class="text-center text-2xl md:text-3xl font-semibold text-white drop-shadow-md text-stroke">
          {title}
        </h3>
      </div>
    </div>
    <div class="flip-card-back flex flex-col justify-center bg-amber-100 text-slate-800 p-6 gap-3">
      <h3 class="text-center text-lg font-semibold">{title}</h3>
      <p class="text-center leading-relaxed">{description}</p>
      {link && (
        <p class="text-center">
          <a class="text-sky-700 underline" href={link} target="_blank" rel="noopener">
            {new URL(link).host}
          </a>
        </p>
      )}
    </div>
  </div>
</div>

<style>
  .flip-card { perspective: 1200px; isolation: isolate; }
  .flip-card {
    perspective: 1000px;
    isolation: isolate; /* evita artefactos de composición */
  }
  .flip-card-inner {
    transition: transform 480ms cubic-bezier(.2,.65,.3,1);
    transform-style: preserve-3d;
    will-change: transform;
    will-change: transform;
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 1rem;
  }

  /* Estado estable por clase + accesible por focus */
  .flip-card:hover .flip-card-inner,
  .flip-card.is-flipped .flip-card-inner,
  .flip-card:focus-within .flip-card-inner {
    transform: rotateY(180deg);
  }


  .flip-card-front,
  .flip-card-back {
    position: absolute;
    inset: 0;
    border-radius: inherit;
    overflow: hidden;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    contain: paint;
    will-change: transform;
    transform: translateZ(0); /* fuerza composición estable */
  }
  .flip-card-front { background: #f8fafc; transform: rotateY(0deg) translateZ(0); }
  .flip-card-back { transform: rotateY(180deg) translateZ(0); }

  /* Evita que se pierda el hover al voltear */
  .flip-card-front, .flip-card-back { pointer-events: auto; }

  /* La imagen también con backface oculto y capa propia */
  .flip-card-front img {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    transform: translateZ(0);
  }

  .golden-front { background: linear-gradient(160deg, #fde68a 0%, #facc15 100%); }

  .service-card { width: 100%; max-width: 28rem; height: 20rem; }
  @media (min-width: 768px) { .service-card { height: 21rem; } }
  @media (min-width: 1280px) { .service-card { height: 22rem; } }

  .text-stroke {
    -webkit-text-stroke: 0.6px rgba(0, 0, 0, 0.45);
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.35);
    paint-order: stroke fill;
  }

  @media (prefers-reduced-motion: reduce) {
    .flip-card-inner { transition: none; }
    .flip-card:hover .flip-card-inner,
    .flip-card.is-flipped .flip-card-inner,
    .flip-card:focus-within .flip-card-inner { transform: none; }
    .flip-card-back { transform: none; }
  }
</style>

<script is:inline>
  // Mantiene el estado volteado aunque el hover se pierda a mitad de la animación
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.flip-card').forEach((card) => {
      card.addEventListener('mouseenter', () => card.classList.add('is-flipped'));
      card.addEventListener('mouseleave', () => card.classList.remove('is-flipped'));
      card.addEventListener('focusin', () => card.classList.add('is-flipped'));
      card.addEventListener('focusout', () => card.classList.remove('is-flipped'));
    });
  });
</script>